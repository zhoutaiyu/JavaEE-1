<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns="http://www.springframework.org/schema/beans"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context.xsd">

    <!-- 加载配置文件 -->
    <context:property-placeholder location="classpath:dbconfig.properties"/>
    <!-- 数据库连接池 -->
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
          destroy-method="close">
        <property name="driverClassName" value="${jdbc.driver}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>

        <!-- 初始化连接:连接池启动时创建的初始化连接数量-->
        <property name="initialSize" value="${dhcp.initialSize}"/>
        <!-- 最大活动连接:连接池在同一时间能够分配的最大活动连接的数量-->
        <property name="maxActive" value="${dhcp.maxActive}"/>
        <!--最大空闲连接:连接池中容许保持空闲状态的最大连接数量,超过的空闲连接将被释放-->
        <property name="maxIdle" value="${dhcp.maxIdle}"/>
        <!-- 最小空闲连接数:低于这个数量会被创建新的连接 -->
        <property name="minIdle" value="${dhcp.minIdle}"/>
        <!--最大等待时间，当没有可用连接时，连接池等待连接释放的最大时间，超过该时间限制会抛出异常，如果设置-1表示无限等待（默认为无限，调整为60000ms，避免因线程池不够用，而导致请求被无限制挂起）-->
        <property name="maxWait" value="${dhcp.maxWait}"/>
    </bean>

    <!-- sqlSessionFactory 整合Mybatis -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 数据源 -->
        <property name="dataSource" ref="dataSource"/>
        <!-- mybatis配置文件 -->
        <property name="configLocation" value="classpath:mybatis/SqlMapConfig.xml"/>
    </bean>

    <!-- 配置DAO层的sqlSessionTemplate -->
    <!-- <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
         <constructor-arg index="0" ref="sqlSessionFactory"/>
     </bean>-->


    <!-- 扫描mapper：方便
	    MapperScannerConfigurer：mapper的扫描器，将包下边的mapper接口自动创建代理对象，
	    自动创建到spring容器中，bean的id是mapper的类名（首字母小写） -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- 配置扫描包的路径
             如果要扫描多个包，中间使用半角逗号分隔  -->
        <property name="basePackage" value="cn.qdgxy.tr.mapper"/>
        <!-- 使用sqlSessionFactoryBeanName -->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>
</beans>